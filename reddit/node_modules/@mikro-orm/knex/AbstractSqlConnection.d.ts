import Knex, { Config, QueryBuilder, Raw, Transaction as KnexTransaction } from 'knex';
import { AnyEntity, Connection, EntityData, QueryResult, Transaction } from '@mikro-orm/core';
export declare abstract class AbstractSqlConnection extends Connection {
    protected client: Knex;
    getKnex(): Knex;
    close(force?: boolean): Promise<void>;
    isConnected(): Promise<boolean>;
    transactional<T>(cb: (trx: Transaction<KnexTransaction>) => Promise<T>, ctx?: Transaction<KnexTransaction>): Promise<T>;
    begin(ctx?: KnexTransaction): Promise<KnexTransaction>;
    commit(ctx: KnexTransaction): Promise<void>;
    rollback(ctx: KnexTransaction): Promise<void>;
    execute<T extends QueryResult | EntityData<AnyEntity> | EntityData<AnyEntity>[] = EntityData<AnyEntity>[]>(queryOrKnex: string | QueryBuilder | Raw, params?: any[], method?: 'all' | 'get' | 'run', ctx?: Transaction): Promise<T>;
    /**
     * Execute raw SQL queries from file
     */
    loadFile(path: string): Promise<void>;
    protected logQuery(query: string, took?: number): void;
    protected createKnexClient(type: string): Knex;
    protected getKnexOptions(type: string): Config;
    protected executeKnex(qb: QueryBuilder | Raw, method: 'all' | 'get' | 'run'): Promise<QueryResult | any | any[]>;
    private getSql;
    protected transformKnexResult(res: any, method: 'all' | 'get' | 'run'): QueryResult | any | any[];
    protected abstract transformRawResult<T>(res: any, method: 'all' | 'get' | 'run'): T;
}
