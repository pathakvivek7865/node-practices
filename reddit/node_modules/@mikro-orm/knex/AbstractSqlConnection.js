"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractSqlConnection = void 0;
const knex_1 = __importDefault(require("knex"));
const fs_extra_1 = require("fs-extra");
const core_1 = require("@mikro-orm/core");
class AbstractSqlConnection extends core_1.Connection {
    getKnex() {
        return this.client;
    }
    async close(force) {
        await this.client.destroy();
    }
    async isConnected() {
        try {
            await this.client.raw('select 1');
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    async transactional(cb, ctx) {
        return (ctx || this.client).transaction(cb);
    }
    async begin(ctx) {
        return (ctx || this.client).transaction();
    }
    async commit(ctx) {
        return ctx.commit();
    }
    async rollback(ctx) {
        return ctx.rollback();
    }
    async execute(queryOrKnex, params = [], method = 'all', ctx) {
        if (core_1.Utils.isObject(queryOrKnex)) {
            if (ctx) {
                queryOrKnex.transacting(ctx);
            }
            return await this.executeKnex(queryOrKnex, method);
        }
        const sql = this.getSql(this.client.raw(queryOrKnex, params));
        const res = await this.executeQuery(sql, () => {
            const query = this.client.raw(queryOrKnex, params);
            if (ctx) {
                query.transacting(ctx);
            }
            return query;
        });
        return this.transformRawResult(res, method);
    }
    /**
     * Execute raw SQL queries from file
     */
    async loadFile(path) {
        const buf = await fs_extra_1.readFile(path);
        await this.client.raw(buf.toString());
    }
    logQuery(query, took) {
        super.logQuery(query, took);
    }
    createKnexClient(type) {
        return knex_1.default(this.getKnexOptions(type))
            .on('query', data => {
            if (!data.__knexQueryUid) {
                this.logQuery(data.sql.toLowerCase().replace(/;$/, ''));
            }
        });
    }
    getKnexOptions(type) {
        return core_1.Utils.merge({
            client: type,
            connection: this.getConnectionOptions(),
            pool: this.config.get('pool'),
        }, this.config.get('driverOptions'));
    }
    async executeKnex(qb, method) {
        const sql = this.getSql(qb);
        const res = await this.executeQuery(sql, () => qb);
        return this.transformKnexResult(res, method);
    }
    getSql(qb) {
        const logger = this.config.getLogger();
        if (!logger.isEnabled('query')) {
            return '';
        }
        if (logger.isEnabled('query-params')) {
            return qb.toString();
        }
        const q = qb.toSQL();
        const query = q.toNative ? q.toNative() : q;
        return this.client.client.positionBindings(query.sql);
    }
    transformKnexResult(res, method) {
        if (method === 'all') {
            return res;
        }
        if (method === 'get') {
            return res[0];
        }
        const affectedRows = typeof res === 'number' ? res : 0;
        const insertId = typeof res[0] === 'number' ? res[0] : 0;
        return { insertId, affectedRows, row: res[0], rows: res };
    }
}
exports.AbstractSqlConnection = AbstractSqlConnection;
