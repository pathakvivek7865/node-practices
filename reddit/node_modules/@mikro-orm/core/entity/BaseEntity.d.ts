import { IdentifiedReference } from './Reference';
import { AnyEntity, Dictionary, EntityData, IWrappedEntity, LoadedReference, Populate } from '../typings';
import { AssignOptions } from './EntityAssigner';
export declare abstract class BaseEntity<T extends AnyEntity<T>, PK extends keyof T> implements IWrappedEntity<T, PK> {
    constructor();
    isInitialized(): boolean;
    populated(populated?: boolean): void;
    toReference<PK2 extends PK = never, P extends Populate<T> = never>(): IdentifiedReference<T, PK2> & LoadedReference<T, P>;
    toObject(ignoreFields?: string[]): Dictionary;
    toJSON(...args: any[]): Dictionary;
    assign(data: EntityData<T>, options?: AssignOptions): T;
    init(populated?: boolean): Promise<T>;
}
