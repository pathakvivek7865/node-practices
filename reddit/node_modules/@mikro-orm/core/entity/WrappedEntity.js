"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrappedEntity = void 0;
const uuid_1 = require("uuid");
const Reference_1 = require("./Reference");
const EntityTransformer_1 = require("./EntityTransformer");
const EntityAssigner_1 = require("./EntityAssigner");
const Utils_1 = require("../utils/Utils");
const errors_1 = require("../errors");
class WrappedEntity {
    constructor(entity, __meta, em) {
        this.entity = entity;
        this.__meta = __meta;
        this.__initialized = true;
        this.__populated = false;
        this.__lazyInitialized = false;
        this.__managed = false;
        this.__uuid = uuid_1.v4();
        this.__internal = {
            platform: em.getDriver().getPlatform(),
            metadata: em.getMetadata(),
            validator: em.getValidator(),
        };
    }
    isInitialized() {
        return this.__initialized;
    }
    populated(populated = true) {
        this.__populated = populated;
        this.__lazyInitialized = false;
    }
    toReference() {
        return Reference_1.Reference.create(this.entity);
    }
    toObject(ignoreFields = []) {
        return EntityTransformer_1.EntityTransformer.toObject(this.entity, ignoreFields);
    }
    toJSON(...args) {
        // toJSON methods is added to thee prototype during discovery to support automatic serialization via JSON.stringify()
        return this.entity.toJSON(...args);
    }
    assign(data, options) {
        if ('assign' in this.entity) {
            return this.entity.assign(data, options);
        }
        return EntityAssigner_1.EntityAssigner.assign(this.entity, data, options);
    }
    async init(populated = true, populate, lockMode) {
        const wrapped = this.entity.__helper;
        const em = wrapped.__em;
        if (!em) {
            throw errors_1.ValidationError.entityNotManaged(this.entity);
        }
        await em.findOne(this.entity.constructor.name, this.entity, { refresh: true, lockMode, populate });
        wrapped.populated(populated);
        wrapped.__lazyInitialized = true;
        return this.entity;
    }
    get __primaryKey() {
        return Utils_1.Utils.getPrimaryKeyValue(this.entity, this.__meta.primaryKeys);
    }
    set __primaryKey(id) {
        this.entity[this.__meta.primaryKeys[0]] = id;
    }
    get __primaryKeys() {
        return Utils_1.Utils.getPrimaryKeyValues(this.entity, this.__meta.primaryKeys);
    }
    get __serializedPrimaryKey() {
        if (this.__meta.compositePK) {
            return Utils_1.Utils.getCompositeKeyHash(this.entity, this.__meta);
        }
        const value = this.entity[this.__meta.serializedPrimaryKey];
        if (Utils_1.Utils.isEntity(value)) {
            return value.__helper.__serializedPrimaryKey;
        }
        return value;
    }
}
exports.WrappedEntity = WrappedEntity;
