"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hydrator = void 0;
const Utils_1 = require("../utils/Utils");
class Hydrator {
    constructor(factory, em) {
        this.factory = factory;
        this.em = em;
    }
    /**
     * Hydrates the whole entity. This process handles custom type conversions, creating missing Collection instances,
     * mapping FKs to entity instances, as well as merging those entities.
     */
    hydrate(entity, meta, data, newEntity, convertCustomTypes) {
        const props = this.getProperties(meta, entity);
        for (const prop of props) {
            this.hydrateProperty(entity, prop, data, newEntity, convertCustomTypes);
        }
    }
    /**
     * Hydrates primary keys only
     */
    hydrateReference(entity, meta, data, convertCustomTypes) {
        const props = this.getProperties(meta, entity).filter(prop => prop.primary);
        for (const prop of props) {
            this.hydrateProperty(entity, prop, data, false, convertCustomTypes);
        }
    }
    getProperties(meta, entity) {
        const metadata = this.em.getMetadata();
        const root = Utils_1.Utils.getRootEntity(metadata, meta);
        if (root.discriminatorColumn) {
            meta = metadata.find(entity.constructor.name);
        }
        return Object.values(meta.properties).filter(prop => {
            // `prop.userDefined` is either `undefined` or `false`
            const discriminator = root.discriminatorColumn === prop.name && prop.userDefined === false;
            return !prop.inherited && !discriminator && !prop.embedded;
        });
    }
}
exports.Hydrator = Hydrator;
